/* tslint:disable */
/* eslint-disable */
/**
 * Today\'s Wildlife API
 * API for Today\'s Wildlife application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface WildlifeInfo
 */
export interface WildlifeInfo {
    /**
     * 
     * @type {string}
     * @memberof WildlifeInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WildlifeInfo
     */
    'habitat': string;
    /**
     * 
     * @type {string}
     * @memberof WildlifeInfo
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof WildlifeInfo
     */
    'tips': string;
    /**
     * 
     * @type {string}
     * @memberof WildlifeInfo
     */
    'createdAt': string;
}

/**
 * WildlifeApi - axios parameter creator
 * @export
 */
export const WildlifeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get wildlife information
         * @param {string} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWildlife: async (day?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wildlifes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (day !== undefined) {
                localVarQueryParameter['day'] = day;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WildlifeApi - functional programming interface
 * @export
 */
export const WildlifeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WildlifeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get wildlife information
         * @param {string} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWildlife(day?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WildlifeInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWildlife(day, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WildlifeApi - factory interface
 * @export
 */
export const WildlifeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WildlifeApiFp(configuration)
    return {
        /**
         * 
         * @summary get wildlife information
         * @param {string} [day] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWildlife(day?: string, options?: any): AxiosPromise<WildlifeInfo> {
            return localVarFp.getWildlife(day, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WildlifeApi - object-oriented interface
 * @export
 * @class WildlifeApi
 * @extends {BaseAPI}
 */
export class WildlifeApi extends BaseAPI {
    /**
     * 
     * @summary get wildlife information
     * @param {string} [day] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WildlifeApi
     */
    public getWildlife(day?: string, options?: AxiosRequestConfig) {
        return WildlifeApiFp(this.configuration).getWildlife(day, options).then((request) => request(this.axios, this.basePath));
    }
}


